// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SM.Tournament.Infrastructure;

#nullable disable

namespace SM.WebAPI.Migrations.TournamentDb
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20241112142903_Tourv1")]
    partial class Tourv1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SM.Tournament.Domain.Club.Club.ClubTeam", b =>
                {
                    b.Property<int>("ClubID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubID"));

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("ClubAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClubBanner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClubDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClubLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClubLogo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ClubID");

                    b.HasIndex("UserID");

                    b.ToTable("ClubTeam", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("membersCount")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.ToTable("ClubEventBase");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubFund.ClubFunds", b =>
                {
                    b.Property<int>("FundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundID"));

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<decimal>("Contribution")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debt")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Expense")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FundName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FundStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FundType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FundID");

                    b.HasIndex("ClubID");

                    b.ToTable("ClubFunds", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubFund.FundActionHistory", b =>
                {
                    b.Property<int>("FundActionHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundActionHistoryID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FundActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FundID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("playerMember")
                        .HasColumnType("int");

                    b.HasKey("FundActionHistoryID");

                    b.HasIndex("FundID");

                    b.HasIndex("PlayerID");

                    b.ToTable("FundActionHistory", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.LineUp.LineUpBase", b =>
                {
                    b.Property<int>("LineUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LineUpID"));

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineUpName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LineUpType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.HasKey("LineUpID");

                    b.HasIndex("ClubID");

                    b.ToTable("LineUpBase", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.LineUp.LineUpMatches", b =>
                {
                    b.Property<int>("LineUpMatchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LineUpMatchesID"));

                    b.Property<int>("LineUpID")
                        .HasColumnType("int");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.HasKey("LineUpMatchesID");

                    b.ToTable("LineUpMatches", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Match.Matches", b =>
                {
                    b.Property<int>("MatchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchesID"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatchesDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MatchesName")
                        .HasColumnType("int");

                    b.Property<string>("Stadium")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamA")
                        .HasColumnType("int");

                    b.Property<int>("TeamB")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("MatchesID");

                    b.HasIndex("TeamA");

                    b.HasIndex("TeamB");

                    b.ToTable("Matches", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Match.MatchesStatistic", b =>
                {
                    b.Property<int>("MatchesStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchesStatisticId"));

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<int>("Fouls")
                        .HasColumnType("int");

                    b.Property<int>("LineUpID")
                        .HasColumnType("int");

                    b.Property<int>("MatchesID")
                        .HasColumnType("int");

                    b.Property<int>("Pass")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Shot")
                        .HasColumnType("int");

                    b.HasKey("MatchesStatisticId");

                    b.HasIndex("LineUpID");

                    b.HasIndex("MatchesID");

                    b.HasIndex("PlayerID");

                    b.ToTable("MatchesStatistic", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Minigame.Minigames", b =>
                {
                    b.Property<int>("MinigameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MinigameID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDates")
                        .HasColumnType("datetime2");

                    b.Property<string>("MinigameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDates")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("MinigameID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Minigames", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Minigame.Predictions", b =>
                {
                    b.Property<int>("PredictionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredictionID"));

                    b.Property<string>("ClubWin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("MinigameID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Prediction")
                        .HasColumnType("int");

                    b.Property<DateTime>("PredictionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int>("ScoreB")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PredictionID");

                    b.HasIndex("MatchID");

                    b.HasIndex("MinigameID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("UserID");

                    b.ToTable("Predictions", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Minigame.Votes", b =>
                {
                    b.Property<int>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteID"));

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("MinigameID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Selection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoteID");

                    b.HasIndex("MatchID");

                    b.HasIndex("MinigameID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("UserID");

                    b.ToTable("Votes", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Orders.Orders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Player.ClubPlayers", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"));

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PlayerAge")
                        .HasColumnType("int");

                    b.Property<string>("PlayerImage")
                        .IsRequired()
                        .HasMaxLength(5000000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlayerPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerStatus")
                        .HasColumnType("int");

                    b.Property<int>("Shirtnumber")
                        .HasColumnType("int");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<string>("leg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("PlayerID");

                    b.HasIndex("ClubID");

                    b.ToTable("ClubPlayers", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Player.PlayerEvent", b =>
                {
                    b.Property<int>("PlayerEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerEventID"));

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("PlayerEventID");

                    b.HasIndex("EventID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerEvent", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Player.PlayerLineUp", b =>
                {
                    b.Property<int>("PlayerLineUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerLineUpID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit");

                    b.Property<int>("LineUpID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlayerLineUpID");

                    b.HasIndex("LineUpID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerLineUp", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Tournament.TournamentBase", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TournamentDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TournamentLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TournamentOrganizer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TournamentPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TournamentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TournamentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TournamentID");

                    b.ToTable("TournamentBase", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Tournament.TournamentClub", b =>
                {
                    b.Property<int>("TournamentClubID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentClubID"));

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<int>("Drawn")
                        .HasColumnType("int");

                    b.Property<int>("Lost")
                        .HasColumnType("int");

                    b.Property<int>("Played")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.Property<int>("Won")
                        .HasColumnType("int");

                    b.HasKey("TournamentClubID");

                    b.HasIndex("ClubID");

                    b.HasIndex("TournamentID");

                    b.ToTable("TournamentClub", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.CelebrateEvent", b =>
                {
                    b.HasBaseType("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase");

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<string>("Decor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Menu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Music")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("minigame")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("ClubID");

                    b.ToTable("CelebrateEvent", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.TeamMeetingEvent", b =>
                {
                    b.HasBaseType("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase");

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<string>("MeetingAim")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MeetingContent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("TeamMeetingEvent", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.TrainingEvent", b =>
                {
                    b.HasBaseType("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase");

                    b.Property<int>("ClubID")
                        .HasColumnType("int");

                    b.Property<string>("Coach")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LessonTraining")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProcessResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrainingAim")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("TrainingEvent", "tournament");
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.Club.ClubTeam", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubFund.ClubFunds", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubFund.FundActionHistory", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.ClubFund.ClubFunds", null)
                        .WithMany()
                        .HasForeignKey("FundID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.LineUp.LineUpBase", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Match.Matches", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("TeamA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("TeamB")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Match.MatchesStatistic", b =>
                {
                    b.HasOne("SM.Tournament.Domain.LineUp.LineUpBase", null)
                        .WithMany()
                        .HasForeignKey("LineUpID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Match.Matches", null)
                        .WithMany()
                        .HasForeignKey("MatchesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Minigame.Minigames", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Tournament.TournamentBase", null)
                        .WithMany()
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Minigame.Predictions", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Match.Matches", null)
                        .WithMany()
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Minigame.Minigames", null)
                        .WithMany()
                        .HasForeignKey("MinigameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Minigame.Votes", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Match.Matches", null)
                        .WithMany()
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Minigame.Minigames", null)
                        .WithMany()
                        .HasForeignKey("MinigameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Orders.Orders", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Player.ClubPlayers", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Player.PlayerEvent", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase", null)
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Player.PlayerLineUp", b =>
                {
                    b.HasOne("SM.Tournament.Domain.LineUp.LineUpBase", null)
                        .WithMany()
                        .HasForeignKey("LineUpID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Player.ClubPlayers", null)
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Tournament.TournamentClub", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Tournament.TournamentBase", null)
                        .WithMany()
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.CelebrateEvent", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.Club.ClubTeam", null)
                        .WithMany()
                        .HasForeignKey("ClubID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase", null)
                        .WithOne()
                        .HasForeignKey("SM.Tournament.Domain.Club.ClubEvent.CelebrateEvent", "EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.TeamMeetingEvent", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase", null)
                        .WithOne()
                        .HasForeignKey("SM.Tournament.Domain.Club.ClubEvent.TeamMeetingEvent", "EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SM.Tournament.Domain.Club.ClubEvent.TrainingEvent", b =>
                {
                    b.HasOne("SM.Tournament.Domain.Club.ClubEvent.ClubEventBase", null)
                        .WithOne()
                        .HasForeignKey("SM.Tournament.Domain.Club.ClubEvent.TrainingEvent", "EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
