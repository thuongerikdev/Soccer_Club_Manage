
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    
    #gzip  on;
    # server {
    # listen 80;
    # server_name your_domain.com;

    # location / {
    #     proxy_pass http://localhost:5065;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection 'upgrade';
    #     proxy_set_header Host $host;
    #     proxy_cache_bypass $http_upgrade;

    #     # Thêm tiêu đề CORS
    #     add_header 'Access-Control-Allow-Origin' 'http://localhost:3000/';  # Thay '*' bằng tên miền cụ thể nếu cần
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS , DELETE';
    #     add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';

    #     # Xử lý yêu cầu OPTIONS
    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Allow-Origin' 'http://localhost:3000/';  # Thay '*' bằng tên miền cụ thể nếu cần
    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS ,DELETE';
    #         add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
    #         add_header 'Content-Length' 0;
    #         return 204;
    #     }
    # }
   server {
    listen 3001;

    location / {
        # CORS headers cho tất cả các phương thức
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;  # Giới hạn origin nếu cần
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS , DELETE , PUT' always;
        add_header 'Access-Control-Allow-Headers' 'DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;

        # Xử lý OPTIONS cho các yêu cầu preflight
        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods'  ' PUT, DELETE , GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            return 204;  # Respond with no content
        }

        # Chuyển tiếp yêu cầu đến backend
        proxy_pass http://localhost:5065;  # Thay đổi nếu cần thiết
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
}
server {
    listen 5065;

    location / {
        # Thêm CORS headers cho các yêu cầu từ frontend
        add_header 'Access-Control-Allow-Origin' '*' always;  # Cho phép tất cả các origin, hoặc thay '*' bằng domain của bạn
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;

        # Xử lý OPTIONS cho các yêu cầu preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;  # Trả về không có nội dung (204 No Content)
        }

        # Chuyển tiếp yêu cầu tới Momo API
        proxy_pass https://test-payment.momo.vn/v2/gateway/pay;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}



    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
   server {
    listen 5000;
    server_name localhost;
    location /api/ {
        proxy_pass http://localhost:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
 }
}

    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
